function load-module() {
	source $HOME/.config/zsh/modules/$1/init.sh
}

load-module zsh
load-module homebrew
load-module theme
load-module alias
load-module clearhaus
load-module do-not-disturb
load-module terraform
load-module unreal

if [[ "$OSTYPE"	== "darwin"* ]]; then
  # UNLOCK KEYCHAIN FOR SSH IF MACOS
  if [[ ! -z "$SSH_TTY" ]]; then security unlock-keychain; fi
fi

export DOTNET_CLI_TELEMETRY_OPTOUT=1

if [[ "$OSTYPE"	== "darwin"* ]]
then
	# Doom binaries
	export PATH=$HOME/.emacs.d/bin:$PATH
	alias wakatime=wakatime-cli --no-ssl-verify
	# Change default cat to bat
	alias cat="bat --paging never --theme=$(defaults read -globalDomain AppleInterfaceStyle &>/dev/null && echo default || echo GitHub)"
	export BAT_CONFIG_PATH="~/.batrc"
	export npm_config_prefix=~/.node_modules
else
	alias wakatime=$HOME/.wakatime/wakatime-cli
	alias wakatime-cli=$HOME/.wakatime/wakatime-cli

	# Doom binaries
	export PATH=$HOME/.config/emacs/bin:$PATH
	# Change default cat to bat
	alias cat="batcat --paging never --theme=$(defaults read -globalDomain AppleInterfaceStyle &>/dev/null && echo default || echo GitHub)"
	export BAT_CONFIG_PATH="~/.batrc"

	export NVM_DIR="$HOME/.nvm"
	[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
	[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

fi

# You may need to manually set your language environment
# export LANG=en_US.UTF-8


# Path stuff for macos and arch
if [[ "$OSTYPE"	== "darwin"* ]]
then

	# python
	# alias python=/usr/local/bin/python3
	# PYTHON
	# export PATH="$PATH:/Users/morethanthreeletters/Library/Python/3.8/bin"

	# GO
	export GOPATH=$HOME/.go
	export GOROOT="/usr/local/opt/go/libexec"
	export PATH="$PATH:${GOPATH}/bin:${GOROOT}/bin"

	# NODE stuff
	export PATH=$HOME/.node_modules/bin:$PATH

	# SQLITE
	export PATH="/usr/local/opt/sqlite/bin:$PATH"

	# Use GNU tools on macos instead of the macos version
	# brew install coreutils ed findutils gawk gnu-sed gnu-tar grep make
	export PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"

else

	# GO
	export GOPATH="${HOME}/.go"
	export GOROOT="/usr/lib/go"
	export PATH="$PATH:${GOPATH}/bin:${GOROOT}/bin"

	# PYTHON & PIP
	export PATH="$PATH:${HOME}/.local/bin"

	# Just node things
	export PATH=$HOME/.node_modules/bin:$PATH

fi

# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
  export EDITOR='emacs'
else
  export EDITOR='emacs'
fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

function upgrade() {
  ~/.config/scripts/upgrade_doom.sh
	brew update && brew upgrade --formulae
	pip3 list --outdated --format=freeze | grep -v '^\-e' | cut -d = -f 1 | xargs -n1 pip3 install -U
	npm update -g
	go get -u all
}



# Toggle theme

function cyberpunk() {
	toggle-cyberpunk
	emacsclient --eval "(load-theme 'cyberpunk-2077)" &
}

alias cd..="cd ../"

function open-emacs-or-emacsclient () {
	if [[ $1 == "-nw" ]];
	then
		emacs $@
	else
		if [ $(pgrep emacs) ] || [ $(pgrep Emacs) ] ; then
			if [ -z $@ ]
			then
				echo "Emacs is already running and no file was specified"
			else
				nohup emacsclient $@ >/dev/null 2>&1 &
				disown
			fi
		else
			nohup emacs $@ >/dev/null 2>&1 &
			disown
		fi
	fi
}

function restart-roc () {
	ROC_PID=$(pgrep roc-recv)
	if [ $ROC_PID ]; then
		sudo kill $ROC_PID
		echo "$ROC_PID is killed"
		nohup roc-recv -vv -s rtp+rs8m::10001 -r rs8m::10002 >/dev/null 2>&1 &
		disown
		echo "roc-recv restarted"
	else
		echo "roc-recv process not found"
		nohup roc-recv -vv -s rtp+rs8m::10001 -r rs8m::10002 >/dev/null 2>&1 &
		disown
		echo "roc-recv started"
	fi
}

function restart-pulseaudio () {
	PULSE_AUDIO_PID=$(pgrep pulseaudio)
	if [ $PULSE_AUDIO_PID ]; then
		pulseaudio -k
		echo "$PULSE_AUDIO_PID is killed"
		sleep 5s
		pulseaudio --start
		echo "pulse-audio restarted"
	else
		echo "pulse-audio process not found"
		pulseaudio --start
		echo "pulse-audio started"
	fi
}

rwtf () {
	PACKAGE_CONFIG=$(pwd)/package.json
	if test -f "$PACKAGE_CONFIG"; then
		cat $PACKAGE_CONFIG | jq '.scripts'
	else
		echo "No package.json found in this directive"
	fi
}


# Handy shortcut
alias e=exit
#Linux not being mac needs open
if [[ "$OSTYPE"	== "linux"* ]]; then
	 alias open="xdg-open"
fi

alias em=open-emacs-or-emacsclient


alias o=open
alias ls="ls --color=always"

export AWS_DEFAULT_REGION=eu-west-1


LINES=24
function cd() {
	builtin cd $@
	ENTRIES=$(ls -a | wc -l)
	if [ $ENTRIES -lt $LINES ]; then
		ls --color=always
	fi
}

export PATH="/usr/local/opt/docker-virtualbox/bin:$PATH"
export PATH="/usr/local/opt/gnu-sed/libexec/gnubin:$PATH"
export PATH="/usr/local/opt/grep/libexec/gnubin:$PATH"
export PATH="/usr/local/sbin:$PATH"
export PATH="/usr/local/opt/docker-virtualbox/bin:$PATH"
export PATH="/usr/local/opt/sqlite/bin:$PATH"
export PATH="$HOME/.rtags/bin:$PATH"
export PATH=/usr/local/smlnj/bin:"$PATH"
export PATH="$PATH:/Users/nah/.dotnet/tools"

if [[ "$OSTYPE"	== "darwin"* ]]; then
	if which rbenv > /dev/null; then eval "$(rbenv init -)"; fi
else
	export PATH="$HOME/.rbenv/bin:$PATH"
fi
export GPG_TTY=$(tty)

eval "$(direnv hook zsh)"
if which rbenv > /dev/null; then eval "$(rbenv init -)"; fi
export PATH=$PATH:/Users/void/.spicetify

alias mountefi="$HOME/Projects/MountEFI/MountEFI.command"
alias add-repos="$HOME/.config/scripts/add-repos-as-projects.sh"
alias org="cd ~/Library/Mobile\ Documents/iCloud~com~appsonthemove~beorg/Documents/org"
alias brew-upgrade='brew outdated -q | grep -v virtualbox | xargs brew upgrade'
function clearDNS () {
	sudo dscacheutil -flushcache; sudo killall -HUP mDNSResponder
}

function pwoff () {
	sudo shutdown -h now
}

function myip () {
	curl https://icanhazip.com
}


alias temp="~/.config/scripts/get-temp-at-desk.sh"
alias power="~/.config/scripts/get-power.sh"

if [[ -f ~/.airpodsbssid ]]; then
	alias cap="BluetoothConnector --connect $(cat ~/.airpodsbssid) --notify"
fi

function print-colors() {
	T='gYw'   # The test text

	echo -e "\n                 40m     41m     42m     43m     44m     45m     46m     47m";

	for FGs in '    m' '   1m' '  30m' '1;30m' '  31m' '1;31m' '  32m' \
		'1;32m' '  33m' '1;33m' '  34m' '1;34m' '  35m' '1;35m' \
		'  36m' '1;36m' '  37m' '1;37m';
	do FG=${FGs// /}
		 echo -en " $FGs \033[$FG  $T  "
		 for BG in 40m 41m 42m 43m 44m 45m 46m 47m;
		 do echo -en "$EINS \033[$FG\033[$BG  $T  \033[0m";
		 done
		 echo;
	done
	echo
}

if which rbenv > /dev/null; then eval "$(rbenv init -)"; fi

if [ "$(uname -m)" = "arm64" ]; then
	export DOCKER_DEFAULT_PLATFORM=linux/amd64
	export PATH="/opt/homebrew/opt/libpq/bin:$PATH"
fi

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
